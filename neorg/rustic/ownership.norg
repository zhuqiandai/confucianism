@document.meta
title: ownership
description: 
authors: 
categories: rustic
created: 2024-10-09T10:13:22+0800
updated: 2024-10-10T17:27:53+0800
version: 1.1.1
@end

> For lifetime: Live lines might have been a more appropriate term …

> full ownership semantics，on the stack, when the function call ends, Rust deallocates the stack frame.

> Box deallocation principle (almost correct): If a variable is bound to a box, when Rust deallocates the variable’s frame, then Rust deallocates the box’s heap memory.
> Box deallocation principle (fully correct): If a variable owns a box, when Rust deallocates the variable’s frame, then Rust deallocates the box’s heap memory.

所以理解 `stack frame` 至关重要包括之后的闭包

* Part 1

** Copy

   - primitive types
   - tuple of primitive types
   - struct impl `Copy trait` (every fields)

*** Copy trait

** Clone

   > The idea of `Clone` is to make it easy to spot *where heap allocation are occurring*.

*** Clone trait

** Move semantics

   > transfer ownership by assignment

@code rust 
fn main() {
    let first = String::from("Ferris");
    let full = add_suffix(first);
    println!("{full}, originally {first}"); // first is now used here
}

fn add_suffix(mut name: String) -> String {
    name.push_str(" Jr.");
    name
}
@end

   > Remember: it’s not a problem that first points to deallocated memory. It’s a problem that we tried to use first after it became invalid.

* Part 2

** Borrow semantics

   > for permission: `read` -> alias `write` -> mutation; for code: concise and convenient style of programming

   > do not transfer ownership, borrow access to read, use `&` or `mut &`

   避免同时 by the reference and by the operation，Rust 遵循:

	 *Pointer Safety Principle*: data should never be aliased and mutated at the same time.

*** Reference (create a reference to borrowing)

    > References are non-owning pointers, 

*** Dereference

    > Rust implicitly inserts dereferences and references in certain cases, such as calling a method with the dot operator.

**** implicit conversations:

     `dot` 语法是 explicit conversation 的语法糖

*** Borrow checker

		> Borrow checker: ensure the safety of references，by *places* to find permission violations

		> Borrow checker: 是按照位置 (places) 进行检查的

    The core idea behind the borrow checker is that variables have three kinds of permissions on their data (during compile): 

    - R(read) : can be copied (default)
    - W(write) : can be mutated (default)
    - O(own) : can be moved or dropped (with `mut`)

		- shared reference: `&` 
		- unique reference: `&mut`

		> a reference change its permissions while it is "in use", "in use" describes the lifetime
		> Permissions Are Returned At The End of a Reference’s Lifetime

		这里借用有一个新名词 "non-lexical lifetimes" 非词法作用域生命周期。不同于 scope 中普通的生命周期，根据 places 来进行判定

**** /Permissions Are Returned At The End of a Reference’s Lifetime/ 引用的生命周期结束后把 `RWO` 权限返回

**** /Data Must Outlive All Of Its References/ 数据必须比所有它的引用生命周期要长 `F`

@code rust
let s = String::from("Hello world");
let s_ref = &s;
drop(s);
println!("{}", s_ref); // s_ref 的生命周期到这里
@end
		 
		> 注意：这里的生命周期仍然时 `Line livetime` 或者 `place` 为单位的生命周期

** Drop semantics

*** Drop trait

