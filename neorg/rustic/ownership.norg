@document.meta
title: ownership
description: 
authors: 
categories: rustic
created: 2024-10-09T10:13:22+0800
updated: 2024-10-10T15:45:59+0800
version: 1.1.1
@end

> full ownership semantics，on the stack, when the function call ends, Rust deallocates the stack frame.

> Box deallocation principle (almost correct): If a variable is bound to a box, when Rust deallocates the variable’s frame, then Rust deallocates the box’s heap memory.
> Box deallocation principle (fully correct): If a variable owns a box, when Rust deallocates the variable’s frame, then Rust deallocates the box’s heap memory.

所以理解 `stack frame` 至关重要包括之后的闭包

** Copy

   - primitive types
   - tuple of primitive types
   - struct impl `Copy trait` (every fields)

*** Copy trait

** Clone

   > The idea of `Clone` is to make it easy to spot *where heap allocation are occurring*.

*** Clone trait

** Move semantics

   > transfer ownership by assignment

@code rust 
fn main () {
  println!("hello")
}
@end

** Borrow semantics

   > not transfer ownership, borrow access to read, use `&` or `mut &`

** Drop semantics

*** Drop trait


** Slice Type
